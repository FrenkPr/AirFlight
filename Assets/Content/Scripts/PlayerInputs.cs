//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Content/Scripts/PlayerInputSystem.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputSystem"",
    ""maps"": [
        {
            ""name"": ""Move"",
            ""id"": ""8b445174-f6d1-4a54-ba59-537134e83e28"",
            ""actions"": [
                {
                    ""name"": ""ForwardDir"",
                    ""type"": ""Value"",
                    ""id"": ""20c23aac-ef15-4602-a15c-da2ae7705a4b"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""095eed25-5fe2-447d-b9b4-8be1ba46a352"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ForwardDir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9eeb6370-5275-4ee4-80ae-fd72d15e2d1f"",
                    ""path"": ""<DualShockGamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": ""AxisDeadzone"",
                    ""groups"": """",
                    ""action"": ""ForwardDir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Rotate"",
            ""id"": ""ae944426-a2e0-4795-8fa7-7ab2baef26e2"",
            ""actions"": [
                {
                    ""name"": ""RotationAxes"",
                    ""type"": ""Value"",
                    ""id"": ""dbae8642-9180-4213-a7a9-6367e6cec29f"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""KeyboardDirValues"",
                    ""id"": ""2dc6ab94-1cc2-4949-bbed-728ed0e4d145"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotationAxes"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f4c4aeeb-88e1-4589-8b0a-f7fbf15617f1"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotationAxes"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d6f92172-3438-48af-a2a7-286429849212"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotationAxes"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""0be6e017-cd44-4648-a0dc-53167f92b385"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotationAxes"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""072ee5d4-496e-44b0-981d-8a4fb5dc0255"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotationAxes"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""forward"",
                    ""id"": ""eae518e2-599d-4f11-b23f-abef873d32cf"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotationAxes"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""backward"",
                    ""id"": ""069bd05b-48d0-4f78-8944-f26b5e6f50ba"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotationAxes"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Ps4DirValues"",
                    ""id"": ""a2e9186e-5d0c-4692-a4b7-edaf7a77bc1a"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotationAxes"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""9a3fe09c-9cdb-40c0-bac7-e7554324ca76"",
                    ""path"": ""<DualShockGamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": ""AxisDeadzone"",
                    ""groups"": """",
                    ""action"": ""RotationAxes"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""16d47923-999c-4af4-acd9-c47c52acc715"",
                    ""path"": ""<DualShockGamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": ""AxisDeadzone"",
                    ""groups"": """",
                    ""action"": ""RotationAxes"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""3e5dd53a-f348-4558-9b38-7a6fa469fc57"",
                    ""path"": ""<DualShockGamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": ""AxisDeadzone"",
                    ""groups"": """",
                    ""action"": ""RotationAxes"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""12af6cb2-512f-4790-8b89-4c4b64e3a21d"",
                    ""path"": ""<DualShockGamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": ""AxisDeadzone"",
                    ""groups"": """",
                    ""action"": ""RotationAxes"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""forward"",
                    ""id"": ""d63d735c-8645-4d96-b199-1f42206e9557"",
                    ""path"": ""<DualShockGamepad>/rightStick/left"",
                    ""interactions"": """",
                    ""processors"": ""AxisDeadzone"",
                    ""groups"": """",
                    ""action"": ""RotationAxes"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""backward"",
                    ""id"": ""a2eaec39-d3b5-4e08-9a17-a689f2b9f66e"",
                    ""path"": ""<DualShockGamepad>/rightStick/right"",
                    ""interactions"": """",
                    ""processors"": ""AxisDeadzone"",
                    ""groups"": """",
                    ""action"": ""RotationAxes"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""757c0824-c65d-4ca0-8471-8cf528d22b77"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": """",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2c2c4359-8ca7-4572-b198-96a4ecc2f272"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": """",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6c66b927-7894-4137-a25f-ca98873bc82a"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": """",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""backward"",
                    ""id"": ""83750a19-9469-43e8-83d7-d8e4ab75d4bd"",
                    ""path"": ""<DualShockGamepad>/rightStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": """",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Brake"",
            ""id"": ""4e767a2e-f612-47bb-acca-9c4428ae2e07"",
            ""actions"": [
                {
                    ""name"": ""BrakeValue"",
                    ""type"": ""Value"",
                    ""id"": ""dab5c3d4-d680-4fe7-a1f4-f19ba5f7f5b6"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""82b3fc28-98af-4482-b465-2c04a34d7136"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BrakeValue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""76aadf94-9401-4c33-b2db-81737cecd6c6"",
                    ""path"": ""<DualShockGamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": ""AxisDeadzone"",
                    ""groups"": """",
                    ""action"": ""BrakeValue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ToggleV_Tol"",
            ""id"": ""a4a6a302-ccea-4a4a-b880-3396a95195bb"",
            ""actions"": [
                {
                    ""name"": ""ToggleV_TolBtnPressed"",
                    ""type"": ""Button"",
                    ""id"": ""3396979d-a94c-4837-94c2-f401ebee9d49"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""99547e07-f2ba-4d7c-a0a5-5f9c638c0dbb"",
                    ""path"": ""<DualShockGamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleV_TolBtnPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e41522cd-5158-4123-88ab-5fed13188de2"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleV_TolBtnPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ToggleCameraView"",
            ""id"": ""ea1c62d1-7170-4f58-81df-9f73eb06d20e"",
            ""actions"": [
                {
                    ""name"": ""ToggleCameraViewBtnPressed"",
                    ""type"": ""Button"",
                    ""id"": ""2baeb488-b12c-4b4b-9823-d13e6629a3f3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bb1ee3e6-bc93-42b7-9989-c49bc42d5bd8"",
                    ""path"": ""<DualShockGamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleCameraViewBtnPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""24f236f7-4164-449c-8556-90f27ef71e1b"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleCameraViewBtnPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""QuitGame"",
            ""id"": ""c8e1427b-db72-4b6c-af47-f528fb2d3711"",
            ""actions"": [
                {
                    ""name"": ""QuitGameBtnPressed"",
                    ""type"": ""Button"",
                    ""id"": ""c3c9a249-dc64-40b5-857a-1e0e4622e6a3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""258b01ee-7efb-4c2f-9b81-66736169daaf"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""QuitGameBtnPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Move
        m_Move = asset.FindActionMap("Move", throwIfNotFound: true);
        m_Move_ForwardDir = m_Move.FindAction("ForwardDir", throwIfNotFound: true);
        // Rotate
        m_Rotate = asset.FindActionMap("Rotate", throwIfNotFound: true);
        m_Rotate_RotationAxes = m_Rotate.FindAction("RotationAxes", throwIfNotFound: true);
        // Brake
        m_Brake = asset.FindActionMap("Brake", throwIfNotFound: true);
        m_Brake_BrakeValue = m_Brake.FindAction("BrakeValue", throwIfNotFound: true);
        // ToggleV_Tol
        m_ToggleV_Tol = asset.FindActionMap("ToggleV_Tol", throwIfNotFound: true);
        m_ToggleV_Tol_ToggleV_TolBtnPressed = m_ToggleV_Tol.FindAction("ToggleV_TolBtnPressed", throwIfNotFound: true);
        // ToggleCameraView
        m_ToggleCameraView = asset.FindActionMap("ToggleCameraView", throwIfNotFound: true);
        m_ToggleCameraView_ToggleCameraViewBtnPressed = m_ToggleCameraView.FindAction("ToggleCameraViewBtnPressed", throwIfNotFound: true);
        // QuitGame
        m_QuitGame = asset.FindActionMap("QuitGame", throwIfNotFound: true);
        m_QuitGame_QuitGameBtnPressed = m_QuitGame.FindAction("QuitGameBtnPressed", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Move
    private readonly InputActionMap m_Move;
    private IMoveActions m_MoveActionsCallbackInterface;
    private readonly InputAction m_Move_ForwardDir;
    public struct MoveActions
    {
        private @PlayerInputs m_Wrapper;
        public MoveActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @ForwardDir => m_Wrapper.m_Move_ForwardDir;
        public InputActionMap Get() { return m_Wrapper.m_Move; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MoveActions set) { return set.Get(); }
        public void SetCallbacks(IMoveActions instance)
        {
            if (m_Wrapper.m_MoveActionsCallbackInterface != null)
            {
                @ForwardDir.started -= m_Wrapper.m_MoveActionsCallbackInterface.OnForwardDir;
                @ForwardDir.performed -= m_Wrapper.m_MoveActionsCallbackInterface.OnForwardDir;
                @ForwardDir.canceled -= m_Wrapper.m_MoveActionsCallbackInterface.OnForwardDir;
            }
            m_Wrapper.m_MoveActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ForwardDir.started += instance.OnForwardDir;
                @ForwardDir.performed += instance.OnForwardDir;
                @ForwardDir.canceled += instance.OnForwardDir;
            }
        }
    }
    public MoveActions @Move => new MoveActions(this);

    // Rotate
    private readonly InputActionMap m_Rotate;
    private IRotateActions m_RotateActionsCallbackInterface;
    private readonly InputAction m_Rotate_RotationAxes;
    public struct RotateActions
    {
        private @PlayerInputs m_Wrapper;
        public RotateActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @RotationAxes => m_Wrapper.m_Rotate_RotationAxes;
        public InputActionMap Get() { return m_Wrapper.m_Rotate; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RotateActions set) { return set.Get(); }
        public void SetCallbacks(IRotateActions instance)
        {
            if (m_Wrapper.m_RotateActionsCallbackInterface != null)
            {
                @RotationAxes.started -= m_Wrapper.m_RotateActionsCallbackInterface.OnRotationAxes;
                @RotationAxes.performed -= m_Wrapper.m_RotateActionsCallbackInterface.OnRotationAxes;
                @RotationAxes.canceled -= m_Wrapper.m_RotateActionsCallbackInterface.OnRotationAxes;
            }
            m_Wrapper.m_RotateActionsCallbackInterface = instance;
            if (instance != null)
            {
                @RotationAxes.started += instance.OnRotationAxes;
                @RotationAxes.performed += instance.OnRotationAxes;
                @RotationAxes.canceled += instance.OnRotationAxes;
            }
        }
    }
    public RotateActions @Rotate => new RotateActions(this);

    // Brake
    private readonly InputActionMap m_Brake;
    private IBrakeActions m_BrakeActionsCallbackInterface;
    private readonly InputAction m_Brake_BrakeValue;
    public struct BrakeActions
    {
        private @PlayerInputs m_Wrapper;
        public BrakeActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @BrakeValue => m_Wrapper.m_Brake_BrakeValue;
        public InputActionMap Get() { return m_Wrapper.m_Brake; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BrakeActions set) { return set.Get(); }
        public void SetCallbacks(IBrakeActions instance)
        {
            if (m_Wrapper.m_BrakeActionsCallbackInterface != null)
            {
                @BrakeValue.started -= m_Wrapper.m_BrakeActionsCallbackInterface.OnBrakeValue;
                @BrakeValue.performed -= m_Wrapper.m_BrakeActionsCallbackInterface.OnBrakeValue;
                @BrakeValue.canceled -= m_Wrapper.m_BrakeActionsCallbackInterface.OnBrakeValue;
            }
            m_Wrapper.m_BrakeActionsCallbackInterface = instance;
            if (instance != null)
            {
                @BrakeValue.started += instance.OnBrakeValue;
                @BrakeValue.performed += instance.OnBrakeValue;
                @BrakeValue.canceled += instance.OnBrakeValue;
            }
        }
    }
    public BrakeActions @Brake => new BrakeActions(this);

    // ToggleV_Tol
    private readonly InputActionMap m_ToggleV_Tol;
    private IToggleV_TolActions m_ToggleV_TolActionsCallbackInterface;
    private readonly InputAction m_ToggleV_Tol_ToggleV_TolBtnPressed;
    public struct ToggleV_TolActions
    {
        private @PlayerInputs m_Wrapper;
        public ToggleV_TolActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @ToggleV_TolBtnPressed => m_Wrapper.m_ToggleV_Tol_ToggleV_TolBtnPressed;
        public InputActionMap Get() { return m_Wrapper.m_ToggleV_Tol; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ToggleV_TolActions set) { return set.Get(); }
        public void SetCallbacks(IToggleV_TolActions instance)
        {
            if (m_Wrapper.m_ToggleV_TolActionsCallbackInterface != null)
            {
                @ToggleV_TolBtnPressed.started -= m_Wrapper.m_ToggleV_TolActionsCallbackInterface.OnToggleV_TolBtnPressed;
                @ToggleV_TolBtnPressed.performed -= m_Wrapper.m_ToggleV_TolActionsCallbackInterface.OnToggleV_TolBtnPressed;
                @ToggleV_TolBtnPressed.canceled -= m_Wrapper.m_ToggleV_TolActionsCallbackInterface.OnToggleV_TolBtnPressed;
            }
            m_Wrapper.m_ToggleV_TolActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ToggleV_TolBtnPressed.started += instance.OnToggleV_TolBtnPressed;
                @ToggleV_TolBtnPressed.performed += instance.OnToggleV_TolBtnPressed;
                @ToggleV_TolBtnPressed.canceled += instance.OnToggleV_TolBtnPressed;
            }
        }
    }
    public ToggleV_TolActions @ToggleV_Tol => new ToggleV_TolActions(this);

    // ToggleCameraView
    private readonly InputActionMap m_ToggleCameraView;
    private IToggleCameraViewActions m_ToggleCameraViewActionsCallbackInterface;
    private readonly InputAction m_ToggleCameraView_ToggleCameraViewBtnPressed;
    public struct ToggleCameraViewActions
    {
        private @PlayerInputs m_Wrapper;
        public ToggleCameraViewActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @ToggleCameraViewBtnPressed => m_Wrapper.m_ToggleCameraView_ToggleCameraViewBtnPressed;
        public InputActionMap Get() { return m_Wrapper.m_ToggleCameraView; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ToggleCameraViewActions set) { return set.Get(); }
        public void SetCallbacks(IToggleCameraViewActions instance)
        {
            if (m_Wrapper.m_ToggleCameraViewActionsCallbackInterface != null)
            {
                @ToggleCameraViewBtnPressed.started -= m_Wrapper.m_ToggleCameraViewActionsCallbackInterface.OnToggleCameraViewBtnPressed;
                @ToggleCameraViewBtnPressed.performed -= m_Wrapper.m_ToggleCameraViewActionsCallbackInterface.OnToggleCameraViewBtnPressed;
                @ToggleCameraViewBtnPressed.canceled -= m_Wrapper.m_ToggleCameraViewActionsCallbackInterface.OnToggleCameraViewBtnPressed;
            }
            m_Wrapper.m_ToggleCameraViewActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ToggleCameraViewBtnPressed.started += instance.OnToggleCameraViewBtnPressed;
                @ToggleCameraViewBtnPressed.performed += instance.OnToggleCameraViewBtnPressed;
                @ToggleCameraViewBtnPressed.canceled += instance.OnToggleCameraViewBtnPressed;
            }
        }
    }
    public ToggleCameraViewActions @ToggleCameraView => new ToggleCameraViewActions(this);

    // QuitGame
    private readonly InputActionMap m_QuitGame;
    private IQuitGameActions m_QuitGameActionsCallbackInterface;
    private readonly InputAction m_QuitGame_QuitGameBtnPressed;
    public struct QuitGameActions
    {
        private @PlayerInputs m_Wrapper;
        public QuitGameActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @QuitGameBtnPressed => m_Wrapper.m_QuitGame_QuitGameBtnPressed;
        public InputActionMap Get() { return m_Wrapper.m_QuitGame; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(QuitGameActions set) { return set.Get(); }
        public void SetCallbacks(IQuitGameActions instance)
        {
            if (m_Wrapper.m_QuitGameActionsCallbackInterface != null)
            {
                @QuitGameBtnPressed.started -= m_Wrapper.m_QuitGameActionsCallbackInterface.OnQuitGameBtnPressed;
                @QuitGameBtnPressed.performed -= m_Wrapper.m_QuitGameActionsCallbackInterface.OnQuitGameBtnPressed;
                @QuitGameBtnPressed.canceled -= m_Wrapper.m_QuitGameActionsCallbackInterface.OnQuitGameBtnPressed;
            }
            m_Wrapper.m_QuitGameActionsCallbackInterface = instance;
            if (instance != null)
            {
                @QuitGameBtnPressed.started += instance.OnQuitGameBtnPressed;
                @QuitGameBtnPressed.performed += instance.OnQuitGameBtnPressed;
                @QuitGameBtnPressed.canceled += instance.OnQuitGameBtnPressed;
            }
        }
    }
    public QuitGameActions @QuitGame => new QuitGameActions(this);
    public interface IMoveActions
    {
        void OnForwardDir(InputAction.CallbackContext context);
    }
    public interface IRotateActions
    {
        void OnRotationAxes(InputAction.CallbackContext context);
    }
    public interface IBrakeActions
    {
        void OnBrakeValue(InputAction.CallbackContext context);
    }
    public interface IToggleV_TolActions
    {
        void OnToggleV_TolBtnPressed(InputAction.CallbackContext context);
    }
    public interface IToggleCameraViewActions
    {
        void OnToggleCameraViewBtnPressed(InputAction.CallbackContext context);
    }
    public interface IQuitGameActions
    {
        void OnQuitGameBtnPressed(InputAction.CallbackContext context);
    }
}
